package datapipe

import (
	"github.com/extism/go-pdk"
	dt "github.com/plusev-terminal/go-plugin-common/datapipe/types"
	m "github.com/plusev-terminal/go-plugin-common/meta"
)

// DataPipePlugin is the interface that plugin developers implement
// The library handles all WASM exports and lifecycle management automatically
type DataPipePlugin interface {
	// GetMeta returns the plugin metadata (PluginID, Name, Category, Resources, etc.)
	// The plugin meta includes Inputs/Outputs as NodePort arrays
	GetMeta() DataPipeMeta

	// GetConfigFields returns the configuration fields needed by this plugin
	// Used to generate UI forms for configuring the node
	// Return nil or empty slice if no configuration is needed
	GetConfigFields() []dt.ConfigField

	// OnInit is called when the plugin is initialized with user configuration
	// The ConfigStore contains all configuration values from the user
	// Return an error if initialization fails (e.g., invalid configuration)
	OnInit(config *ConfigStore) error

	// OnShutdown is called when the plugin is being shut down
	// Clean up any resources (close connections, stop goroutines, etc.)
	OnShutdown() error

	// GetGuiDefinition returns the GUI definition for the plugin configuration
	// This defines the controls shown in the node's configuration panel
	// Return nil if using default config field rendering
	GetGuiDefinition() *dt.GuiDefinition

	// Process is the main processing function called when data flows through the node
	// Input data is keyed by input port name
	// Config contains the user's configuration values for this node instance
	// Return ProcessResponse with output data keyed by output port name
	Process(req dt.ProcessRequest) dt.ProcessResponse
}

// DataPipeMeta extends the base Meta with datapipe-specific fields
type DataPipeMeta struct {
	m.Meta
	Inputs  []dt.NodePort `json:"inputs"`
	Outputs []dt.NodePort `json:"outputs"`
}

// Global state managed by RegisterPlugin
var (
	registeredPlugin DataPipePlugin
	pluginConfig     *ConfigStore
)

// RegisterPlugin registers a DataPipePlugin and generates all WASM exports
// This MUST be called in init() (not main()) so the plugin is registered before
// any WASM exports are invoked by the host
//
// Example:
//
//	func init() {
//	    datapipe.RegisterPlugin(&MyStrategyPlugin{})
//	}
//
//	func main() {
//	    // Required for WASM, but can be empty
//	}
func RegisterPlugin(plugin DataPipePlugin) {
	registeredPlugin = plugin
	pluginConfig = NewConfigStore()
}

// ============================================================================
// WASM Exports - Auto-generated by RegisterPlugin
// ============================================================================

//go:wasmexport meta
func meta() int32 {
	pluginMeta := registeredPlugin.GetMeta()
	pdk.OutputJSON(pluginMeta)
	return 0
}

//go:wasmexport get_configuration_fields
func get_configuration_fields() int32 {
	fields := registeredPlugin.GetConfigFields()
	pdk.OutputJSON(fields)
	return 0
}

//go:wasmexport get_gui_definition
func get_gui_definition() int32 {
	guiDef := registeredPlugin.GetGuiDefinition()
	pdk.OutputJSON(guiDef)
	return 0
}

//go:wasmexport init
func initialize() int32 {
	// Load configuration from backend
	err := pluginConfig.Load()
	if err != nil {
		return 1
	}

	// Call plugin's OnInit with loaded configuration
	err = registeredPlugin.OnInit(pluginConfig)
	if err != nil {
		return 1
	}

	return 0
}

//go:wasmexport process
func process() int32 {
	// Read process request from input
	req, err := ReadProcessRequest()
	if err != nil {
		resp := ErrorResponse(err)
		return WriteProcessResponse(resp)
	}

	// Call plugin's Process method
	resp := registeredPlugin.Process(req)
	return WriteProcessResponse(resp)
}

//go:wasmexport shutdown
func shutdown() int32 {
	err := registeredPlugin.OnShutdown()
	if err != nil {
		return 1
	}

	return 0
}
