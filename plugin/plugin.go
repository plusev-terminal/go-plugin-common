package plugin

import (
	"github.com/extism/go-pdk"
	m "github.com/plusev-terminal/go-plugin-common/meta"
)

// Plugin is the interface that plugin developers implement
// The library handles all WASM exports and lifecycle management automatically
type Plugin interface {
	// GetMeta returns the plugin metadata (PluginID, Name, AppID, Resources, etc.)
	GetMeta() m.Meta

	// GetConfigFields returns the configuration fields needed by this plugin
	// Used to generate UI forms for creating/editing connections
	GetConfigFields() []ConfigField

	// OnInit is called when the plugin is initialized with user configuration
	// The ConfigStore contains all configuration values from the user
	// Return an error if initialization fails (e.g., invalid credentials)
	OnInit(config *ConfigStore) error

	// OnShutdown is called when the plugin is being shut down
	// Clean up any resources
	OnShutdown() error

	// GetRateLimits returns the rate limit configurations for this plugin's commands
	// Rate limiting is enforced by the wrapper before command execution
	// Return nil or empty slice to use default rate limits
	GetRateLimits() []RateLimit

	// RegisterCommands registers command handlers with the router
	// Example: router.Register("getMarkets", p.handleGetMarkets)
	RegisterCommands(router *CommandRouter)
}

// Global state managed by RegisterPlugin
var (
	registeredPlugin Plugin
	pluginConfig     *ConfigStore
	pluginRouter     *CommandRouter
)

// RegisterPlugin registers a Plugin and generates all WASM exports
// This MUST be called in init() (not main()) so the plugin is registered before
// any WASM exports are invoked by the host
//
// Example:
//
//	func init() {
//	    datasrc.RegisterPlugin(&MyExchangePlugin{})
//	}
//
//	func main() {
//	    // Required for WASM, but can be empty
//	}
func RegisterPlugin(plugin Plugin) {
	registeredPlugin = plugin
	pluginConfig = NewConfigStore()
	pluginRouter = NewCommandRouter()

	// Register commands from the plugin
	plugin.RegisterCommands(pluginRouter)
}

// ============================================================================
// WASM Exports - Auto-generated by RegisterPlugin
// ============================================================================

//go:wasmexport meta
func meta() int32 {
	pluginMeta := registeredPlugin.GetMeta()

	// Auto-populate Features with registered commands
	if pluginRouter != nil {
		registeredCommands := pluginRouter.GetRegisteredCommands()

		// Create a map of existing features for quick lookup
		existingFeatures := make(map[string]bool)
		for _, feature := range pluginMeta.Features {
			existingFeatures[feature] = true
		}

		// Add registered commands to features if not already present
		for _, cmd := range registeredCommands {
			if !existingFeatures[cmd] {
				pluginMeta.Features = append(pluginMeta.Features, cmd)
			}
		}
	}

	pdk.OutputJSON(pluginMeta)
	return 0
}

//go:wasmexport get_configuration_fields
func get_configuration_fields() int32 {
	return ExportConfigFields(registeredPlugin.GetConfigFields())
}

//go:wasmexport get_rate_limits
func get_rate_limits() int32 {
	limits := registeredPlugin.GetRateLimits()
	pdk.OutputJSON(limits)
	return 0
}

//go:wasmexport init
func initialize() int32 {
	// Load configuration from backend
	err := pluginConfig.Load()
	if err != nil {
		return 1
	}

	// Call plugin's OnInit with loaded configuration
	err = registeredPlugin.OnInit(pluginConfig)
	if err != nil {
		return 1
	}

	return 0
}

//go:wasmexport handle_command
func handle_command() int32 {
	return pluginRouter.HandleJSON()
}

//go:wasmexport shutdown
func shutdown() int32 {
	err := registeredPlugin.OnShutdown()
	if err != nil {
		return 1
	}

	return 0
}
